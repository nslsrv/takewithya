FAKEID=r2983760

CURDIR=.
BINDIR=bin:/
SRCDIR=
YMAKE=ymake
ECHO=echo
# Only to fix warning from library/build_info
SANDBOX_TASK_ID=0

? (!$OS_SDK) OS_SDK=system
? ($OS_SDK == "system") OS_SDK_ROOT=
? ($OS_SDK != "system") OS_SDK_ROOT=$(OS_SDK_ROOT)

ARCH_OPT=
TARGET_OPT=

? ($USE_GCCFILTER == "yes") GCCFILTER=${ARCADIA_ROOT}/devtools/gccfilter/gccfilter.pl
? ($USE_GCCFILTER == "yes" && $USE_GCCFILTER_COLOR == "yes") GCCFILTER+=-c
? ($USE_GCCFILTER != "yes") GCCFILTER=

? ($YNDEXER_RESOURCE_ID) YNDEXER="$(YNDEXER)/yndexer"

? (!$YNDEXER) YNDEXER_ARGS=
? ($YNDEXER) YNDEXER_ARGS=$YMAKE_PYTHON ${input:"build/scripts/yndexer.py"} $YNDEXER $(SOURCE_ROOT) ${input:SRC} $YNDEXER_OUTPUT

COVERAGE_FLAGS=
? ($COVERAGE) COVERAGE_FLAGS=-fprofile-arcs -ftest-coverage
? ($COVERAGE) EXTRA_OUTPUT=$EXTRA_COVERAGE_OUTPUT
? ($COVERAGE) USE_STDLIB=

? ($ARCH_AARCH64 == "yes") CFLAGS+=-fsigned-char -fexceptions -DIOV_MAX=1024
? ($ARCH_PPC64LE == "yes") CFLAGS+=-fsigned-char -fexceptions

? ($OS_CYGWIN == "yes") CFLAGS+=-D_LDBL_EQ_DBL=1 -U__STRICT_ANSI__
? ($OS_CYGWIN == "yes") USE_ASMLIB=no
? ($OS_CYGWIN == "yes") FSTACK=
? ($OS_CYGWIN == "yes") PICFLAGS=

CFLAGS+=$COVERAGE_FLAGS
LDFLAGS+=$COVERAGE_FLAGS

#LDFLAGS+=-fuse-ld=lld-4.0

RLGEN_FLAGS=-G2
RAGEL_FLAGS=
RAGEL6_FLAGS=-CG2

? ($MSVC == "yes") RLGEN_FLAGS=-T0
? ($MSVC == "yes") RAGEL6_FLAGS=-CT0

SKIP_JUNK=yes

# USE_INTERNAL_STL is an internal flag (set on by default) but may be used externally to
# select system standard C++ library when USE_INTERNAL_STL=no is set.
#
# USE_STL_SYSTEM=yes is a regular way to select system standard C++ library.
#
? ($USE_STL_SYSTEM == "yes") USE_INTERNAL_STL=no
? ($USE_INTERNAL_STL == "no") USE_STL_SYSTEM=yes
? ($USE_INTERNAL_STL != "no") USE_INTERNAL_STL=yes

USE_ARCADIA_PYTHON=yes
USE_ARCADIA_LIBM=no
USE_EAT_MY_DATA=no

SFDL_TMP_OUT= ${output;tmp:SRC.tmp}

PERL=perl
ARCH_TOOL=${tool:"tools/archiver"}
PROTOC=${tool:"contrib/tools/protoc"}
PROTOC_STYLEGUIDE=${tool:"contrib/tools/protoc/plugins/cpp_styleguide"}
FML_TOOL=${tool:"tools/relev_fml_codegen"}
FML_UNUSED_TOOL=${tool:"tools/relev_fml_unused"}
LUA_TOOL=${tool:"tools/lua"}
ENUM_PARSER_TOOL=${tool:"tools/enum_parser/enum_parser"}

USE_INTERNAL_CUDA=yes
? ($CUDA_ROOT) USE_INTERNAL_CUDA=no
? ($USE_INTERNAL_CUDA == "yes") CUDA_ROOT=$(CUDA)

NVCC=$CUDA_ROOT/bin/nvcc
? ($CXX_COMPILER && $USE_INTERNAL_CUDA == "yes" && $ARCH_X86_64 == "yes") NVCCOPTS+=--compiler-bindir=$(CUDA)/compiler/gcc/bin/g++-4.9
? ($CXX_COMPILER && $USE_INTERNAL_CUDA == "yes" && $ARCH_AARCH64 == "yes") NVCCOPTS+=--compiler-bindir=$(CUDA)/compiler/gcc/bin/aarch64-linux-g++
? ($CXX_COMPILER && $USE_INTERNAL_CUDA == "no") NVCCOPTS+=--compiler-bindir=$CXX_COMPILER

CYTHON_SCRIPT=${input:"contrib/tools/cython/cython.py"}
CYTHON_OUTPUT_INCLUDES=${output_include;hide:"contrib/tools/python/src/Include/Python.h"} \
${output_include;hide:"contrib/tools/python/src/pyconfig.h"} \
${output_include;hide:"contrib/tools/python/src/Include/compile.h"} \
${output_include;hide:"contrib/tools/python/src/Include/frameobject.h"} \
${output_include;hide:"contrib/tools/python/src/Include/traceback.h"}

#TODO: reuse PYTHON_PATH in other vars
PYTHON_TOOL=${ARCADIA_BUILD_ROOT}/contrib/tools/python/python
PYTHON_PATH=contrib/tools/python
? ($USE_ARCADIA_PYTHON == "no")PYTHON_TOOL=python
PYTHON_BS_TOOL=${tool:"contrib/tools/python/bootstrap"}
? ($USE_ARCADIA_PYTHON == "no")PYTHON_BS_TOOL=python
DEFAULT_ALLOCATOR=LF

? ($OS_ANDROID == "yes" || $MSVC == "yes") DEFAULT_ALLOCATOR=J
? ($OS_CYGWIN == "yes") DEFAULT_ALLOCATOR=SYSTEM
? ($SANITIZER_TYPE && $SANITIZER_TYPE != "no") DEFAULT_ALLOCATOR=SYSTEM
? ($SANITIZER_TYPE && $SANITIZER_TYPE == "pg") DEFAULT_ALLOCATOR=BS

CHECK_CONFIG_H(Conf) {
    cmd=$YMAKE_PYTHON ${input:"build/scripts/check_config_h.py"} ${input;rootrel:Conf} ${output;noext:Conf.config.cpp} ${kv;hide:"p CH"} ${kv;hide:"pc yellow"};
    OUTPUT_INCLUDES=$Conf;
}

PROTO_NAMESPACE=
PROTO_PATH=$ARCADIA_ROOT/contrib/libs/protobuf

CPP_PROTO_CMD(File) {
    cmd=${cwd;rootdir;input:File} $PROTOC -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --cpp_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE --cpp_styleguide_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE --plugin=protoc-gen-cpp_styleguide=$PROTOC_STYLEGUIDE ${input;rootrel:File} ${output;hide;norel;noext:File.pb.cc} ${output;hide;norel;noext:File.pb.h} ${kv;hide:"p PB"} ${kv;hide:"pc yellow"} $GRPC_CPP_ARGS;
    include_cpp;
    peerdir=contrib/libs/protobuf;
}

PY_PROTO_CMD(File)=${cwd;rootdir;input:File} $PROTOC -I=. -I=$ARCADIA_ROOT -I=$PROTO_PATH --python_out=$ARCADIA_BUILD_ROOT ${input;rootrel:File} ${output;hide;norel;noext;suf=_pb2.py:File} ${kv;hide:"p PT"} ${kv;hide:"pc yellow"} $GRPC_PY_ARGS;

JAVA_PROTO_CMD(File)=${cwd;rootdir;input:File} $YMAKE_PYTHON ${input:"build/scripts/tared_protoc.py"} --tar-output ${output;norel;noext;suf=.jsrc:File} --protoc-out-dir $ARCADIA_BUILD_ROOT/java_out $PROTOC -I=. -I=$ARCADIA_ROOT -I=$PROTO_PATH --java_out=$ARCADIA_BUILD_ROOT/java_out ${input;rootrel:File} ${kv;hide:"p PT"} ${kv;hide:"pc yellow"} $GRPC_JAVA_ARGS;

XS_PROTO(File, Dir, Outputs...) {
    $PEERDIR(${Dir})
    $ADDINCL(${ARCADIA_BUILD_ROOT}/${Dir})
    cmd=$PROTOC -I=${ARCADIA_ROOT}/${Dir} -I=${ARCADIA_ROOT} -I=${PROTO_PATH} --perlxs_out=${BINDIR} ${input:File} ${hide;output:Outputs};
}

PROTO2FBS(File)=${cwd:BINDIR} ${tool:"contrib/tools/flatc"} -I . -I ${ARCADIA_ROOT} --proto ${input:File} ${output;hide;noext:File.fbs} ${kv;hide:"p FBS"} ${kv;hide:"pc yellow"};

? ($PY_PROTOS_FOR == "yes") PEERDIR+=contrib/libs/protobuf/python;

CPP_EVLOG_CMD(File) {
    cmd=${cwd:ARCADIA_ROOT} $PROTOC --cpp_out=$ARCADIA_BUILD_ROOT --plugin=protoc-gen-cpp_styleguide=$PROTOC_STYLEGUIDE --cpp_styleguide_out=$ARCADIA_BUILD_ROOT --plugin=protoc-gen-event2cpp=${tool:"tools/event2cpp"} --event2cpp_out=$ARCADIA_BUILD_ROOT -I. -I$ARCADIA_ROOT -I$PROTO_PATH -I$ARCADIA_ROOT/library/eventlog ${input;rootrel:SRC} ${output;chksum;hide:SRC.pb.cc} ${output;chksum;hide:SRC.pb.h} ${kv;hide:"p EV"} ${kv;hide:"pc yellow"};
    peerdir=library/eventlog contrib/libs/protobuf;
    include_cpp;
}

PY_EVLOG_CMD(File) {
    cmd=$COPY_CMD ${input:File} ${output;noext;norel;suf=_ev.proto:File} ${kv;hide:"p EV"} ${kv;hide:"pc yellow"};
    peerdir=library/eventlog/proto;
}

JAVA_EVLOG_CMD(File) {
    cmd=$COPY_CMD ${input:File} ${output;noext;norel;suf=_ev.proto:File} ${kv;hide:"p EV"} ${kv;hide:"pc yellow"};
    peerdir=library/eventlog/proto;
}

? ($SWIG_LANG == "python")SWIG_OUTPUT=${output;tobindir;linktolib;noauto;add_to_outs;hide:REALPRJNAME.py}
? ($SWIG_LANG == "perl")SWIG_OUTPUT= ${output;tobindir;linktolib;noauto;add_to_outs;hide:REALPRJNAME.pm}
? ($SWIG_LANG == "perl")SWIG_FLAGS+= -shadow
? ($SWIG_LANG == "perl")PEERDIR+=contrib/libs/perl-core


RUN_NO_SANITIZE=$YMAKE_PYTHON ${input:"build/scripts/run_tool.py"} --

? ($IS_CROSS_SANITIZE) RUN_NO_SANITIZE=

YIELD=$YMAKE_PYTHON ${input:"build/scripts/yield_line.py"} -- ${BINDIR}/__args
XARGS=$YMAKE_PYTHON ${input:"build/scripts/xargs.py"} -- ${BINDIR}/__args

RESPFILE_CMD=$YMAKE_PYTHON ${input:"build/scripts/writer.py"}

FS_TOOLS=$YMAKE_PYTHON ${input:"build/scripts/fs_tools.py"}

COPY_CMD=$FS_TOOLS copy
REMOVE_FILE=$FS_TOOLS remove
MOVE_FILE=$FS_TOOLS rename

MSVC_DYNAMICBASE=/DYNAMICBASE
? ($ALLOCATOR == "LF") MSVC_DYNAMICBASE=/DYNAMICBASE:NO

SANITIZER_CFLAGS=

GRPC_FLAG=no
GRPC() {
    $SET(GRPC_FLAG yes)
}

GRPC_CPP_ARGS=
GRPC_PY_ARGS=
GRPC_JAVA_ARGS=

BASE_UNIT {
    module;
    module_exts=.*
    module_cmd=TOUCH_UNIT
    module_node_type=Bundle
    module_peerdir_policy=as_include
    proto_policy=CPP_PROTO
    restricted=GRPC

    ? ($GRPC_FLAG == "yes") GRPC_CPP_ARGS+=--plugin=protoc-gen-grpc_cpp=${tool:"contrib/tools/protoc/plugins/grpc_cpp"} --grpc_cpp_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${output;hide;norel;noext:File.grpc.pb.cc} ${output;hide;norel;noext:File.grpc.pb.h}
    ? ($GRPC_FLAG == "yes") GRPC_PY_ARGS+=--plugin=protoc-gen-grpc_py=${tool:"contrib/tools/protoc/plugins/grpc_python"} --grpc_py_out=$ARCADIA_BUILD_ROOT ${output;hide;norel;noext;suf=_pb2_grpc.py:File}
    ? ($GRPC_FLAG == "yes") GRPC_JAVA_ARGS+=--plugin=protoc-gen-grpc_java=${tool:"contrib/tools/protoc/plugins/grpc_java"} --grpc_java_out=$ARCADIA_BUILD_ROOT/java_out

    ? ("yes") PROTO_SOURCE_INCLUDE=contrib/libs/protobuf/stubs/common.h contrib/libs/protobuf/generated_message_util.h contrib/libs/protobuf/repeated_field.h contrib/libs/protobuf/extension_set.h contrib/libs/protobuf/generated_message_reflection.h contrib/libs/protobuf/service.h contrib/libs/protobuf/messagext.h

    ? ("yes") PROTO_HEADER_INCLUDE=contrib/libs/protobuf/stubs/once.h contrib/libs/protobuf/io/coded_stream.h contrib/libs/protobuf/wire_format_lite_inl.h contrib/libs/protobuf/descriptor.h contrib/libs/protobuf/reflection_ops.h contrib/libs/protobuf/wire_format.h contrib/libs/protobuf/ya_nulls.h

    ? ($GRPC_FLAG == "yes") PROTO_HEADER_INCLUDE+=contrib/libs/grpc/include/grpc++/impl/codegen/async_stream.h contrib/libs/grpc/include/grpc++/impl/codegen/async_unary_call.h contrib/libs/grpc/include/grpc++/impl/codegen/method_handler_impl.h contrib/libs/grpc/include/grpc++/impl/codegen/proto_utils.h contrib/libs/grpc/include/grpc++/impl/codegen/rpc_method.h contrib/libs/grpc/include/grpc++/impl/codegen/service_type.h contrib/libs/grpc/include/grpc++/impl/codegen/status.h contrib/libs/grpc/include/grpc++/impl/codegen/stub_options.h contrib/libs/grpc/include/grpc++/impl/codegen/sync_stream.h
    ? ($GRPC_FLAG == "yes") PROTO_SOURCE_INCLUDE+=contrib/libs/grpc/include/grpc++/impl/codegen/async_stream.h contrib/libs/grpc/include/grpc++/impl/codegen/async_unary_call.h contrib/libs/grpc/include/grpc++/impl/codegen/channel_interface.h contrib/libs/grpc/include/grpc++/impl/codegen/client_unary_call.h contrib/libs/grpc/include/grpc++/impl/codegen/method_handler_impl.h contrib/libs/grpc/include/grpc++/impl/codegen/rpc_service_method.h contrib/libs/grpc/include/grpc++/impl/codegen/service_type.h contrib/libs/grpc/include/grpc++/impl/codegen/sync_stream.h

    # XXX workaround DEVTOOLS-3278
    ? ($GRPC_FLAG == "yes") PROTOC=${tool:"contrib/tools/protoc"}

    $DEFAULT(PY_PROTOS_FOR no)

    ? ($PY_PROTOS_FOR == "yes") EVLOG_CMD=(File)$PY_EVLOG_CMD($File)
    ? ($PY_PROTOS_FOR == "yes") PROTO_CMD=(File)$PY_PROTO_CMD($File)

    ? ($PY_PROTOS_FOR != "yes") EVLOG_CMD=(File)$CPP_EVLOG_CMD($File)
    ? ($PY_PROTOS_FOR != "yes") PROTO_CMD=(File)$CPP_PROTO_CMD($File)

    SANITIZER_DEFINED=no

    ? ($SANITIZER_TYPE && $SANITIZER_TYPE != "no" && $SANITIZER_TYPE != "pg") CFLAGS+=-fsanitize=$SANITIZER_TYPE -D${SANITIZER_TYPE}_sanitizer_enabled -fsanitize-blacklist=${input:"build/sanitize-blacklist.txt"} $SANITIZER_CFLAGS
    ? ($SANITIZER_TYPE && $SANITIZER_TYPE != "no" && $SANITIZER_TYPE != "pg") LDFLAGS+=-fsanitize=$SANITIZER_TYPE -fsanitize-blacklist=${input:"build/sanitize-blacklist.txt"}
    ? ($SANITIZER_TYPE && $SANITIZER_TYPE != "no" && $SANITIZER_TYPE != "pg") SANITIZER_DEFINED=yes

    ? ($SANITIZE_COVERAGE && $SANITIZE_COVERAGE != "no") CFLAGS+=-fsanitize-coverage=$SANITIZE_COVERAGE
    ? ($SANITIZE_COVERAGE && $SANITIZE_COVERAGE != "no") LDFLAGS+=-fsanitize-coverage=$SANITIZE_COVERAGE

    ? ($SANITIZER_TYPE && $SANITIZER_TYPE == "pg") CFLAGS+=-fno-omit-frame-pointer -Dpg_sanitizer_enabled

    ? ($GCC && $SANITIZER_TYPE == "address") LDFLAGS+=-static-libasan
    ? ($GCC && $SANITIZER_TYPE == "undefined") LDFLAGS+=-static-libubsan
    ? ($GCC && $SANITIZER_TYPE == "thread") LDFLAGS+=-pie -static-libtsan

    ? ($USE_LTO == "yes" && $GCC) CFLAGS+=-flto -fno-fat-lto-objects
    ? ($USE_LTO == "yes" && $GCC) LDFLAGS+=-flto
    ? ($USE_LTO == "yes" && $CLANG) CFLAGS+=-emit-llvm
    ? ($USE_LTO == "yes" && $CLANG) LDFLAGS+=-flto -fuse-ld=gold

    ? ($PGO_ADD == "yes" && $CLANG) CFLAGS+=-fprofile-instr-generate
    ? ($PGO_ADD == "yes" && $CLANG) LDFLAGS+=-fprofile-instr-generate

    ? ($PGO_PATH && $CLANG) CFLAGS+=-fprofile-instr-use=$PGO_PATH -Wno-profile-instr-unprofiled -Wno-profile-instr-out-of-date
    ? ($PGO_PATH && $CLANG) LDFLAGS+=-fprofile-instr-use=$PGO_PATH

    ? ($COMPILER_PLATFORM && $NOPLATFORM != "yes") PEERDIR+=$COMPILER_PLATFORM
    ? ($MUSL == "yes") PEERDIR += contrib/libs/musl-1.1.16/full

    # g++ has proxy C-headers which are incompatible with libc++ proxy C-headers.
    # The same problem exists for clang toolchain. On the other hand, the problem
    # doesn't affect cl since it has united C/C++ library and doesn't need
    # proxy C-headers.
    # Disable all C++ headers including proxy C-headers when we use libc++.
    ? ($USE_INTERNAL_STL == "yes" && $MSVC != "yes") CXXFLAGS += -nostdinc++

    ? ($MSVC == "yes" && $NO_WINDOWS_STRICT != "yes") CFLAGS+=/DSTRICT
    ? ($MSVC == "yes" && $NO_WIN32_LEAN != "yes") CFLAGS+=/DNOMINMAX /DWIN32_LEAN_AND_MEAN

    $DEFAULT(PACKAGE_PREFIX_ARGS)
}

LINK_UNIT: BASE_UNIT {
    module;
    module_exts=.o .obj
    module_cmd=LINK_EXE
    module_node_type=Program
    module_peerdir_policy=as_build_from

    $DEFAULT(ALLOCATOR $DEFAULT_ALLOCATOR);

    #link with libunwind manually
    ? ($DARWIN == "yes" && $NOPLATFORM != "yes") PEERDIR += contrib/libs/cxxsupp/libcxxrt

    ? ($USE_LIBCXXRT == "yes") PEERDIR += contrib/libs/cxxsupp/libcxxrt

    ? ($USE_MKL == "yes") NOPLATFORM=yes

    ? (($USE_EAT_MY_DATA == "yes") && ($WIN32 != "yes") && ($DARWIN != "yes") && ($OS_ANDROID != "yes")) PEERDIR+=contrib/libs/libeatmydata

    ? ($USE_ARCADIA_LIBM == "yes") PEERDIR+=contrib/libs/libm
    ? ($USE_ARCADIA_LIBM == "no") LINK_OPTIONS_END += -lm

    ? (($ALLOCATOR == "GOOGLE") && ($WITH_VALGRIND != "yes") && ($SANITIZER_DEFINED != "yes")) PEERDIR+=library/malloc/galloc
    ? (($ALLOCATOR == "J") && ($WITH_VALGRIND != "yes") && ($WIN32 != "yes")  && ($SANITIZER_DEFINED != "yes")) PEERDIR+=library/malloc/jemalloc
    ? (($ALLOCATOR == "J") && ($WITH_VALGRIND != "yes") && ($WIN32 == "yes") && ($SANITIZER_DEFINED != "yes")) PEERDIR+=library/malloc/system
    ? (($ALLOCATOR == "LF") && ($WITH_VALGRIND != "yes") && ($SANITIZER_DEFINED != "yes")) PEERDIR+=library/lfalloc
    ? (($ALLOCATOR == "LF_YT") && ($WITH_VALGRIND != "yes") && ($SANITIZER_DEFINED != "yes")) PEERDIR+=library/lfalloc/yt
    ? (($ALLOCATOR == "LF_DBG") && ($WITH_VALGRIND != "yes") && ($SANITIZER_DEFINED != "yes")) PEERDIR+=library/lfalloc/dbg
    ? (($ALLOCATOR == "B") && ($WITH_VALGRIND != "yes") && ($SANITIZER_DEFINED != "yes")) PEERDIR+=library/balloc
    ? (($ALLOCATOR == "BS") && ($WITH_VALGRIND != "yes") && ($SANITIZER_DEFINED != "yes")) PEERDIR+=library/balloc/sanitize
    ? (($ALLOCATOR == "LOCKLESS") && ($WITH_VALGRIND != "yes") && ($SANITIZER_DEFINED != "yes")) PEERDIR+=library/malloc/lockless
    ? ((($WITH_VALGRIND == "yes") || ($SANITIZER_DEFINED == "yes")) && (($ALLOCATOR == "GOOGLE") || ($ALLOCATOR == "J") || ($ALLOCATOR == "LF") || ($ALLOCATOR == "LF_YT") || ($ALLOCATOR == "LF_DBG") || ($ALLOCATOR == "B") || ($ALLOCATOR == "BS"))) PEERDIR+=library/malloc/system
    ? ($ALLOCATOR == "SYSTEM") PEERDIR+=library/malloc/system
    # TODO: fix WERROR and MSVC_WERROR macros
    ? (($NO_COMPILER_WARNINGS != "yes" && $WERROR != "no") && ($WERROR_MODE == "all" || ($WERROR_MODE == "compiler_specific" && $WERROR == "yes"))) CFLAGS+=$WERROR_FLAG

    ? ($ICC == "yes") PEERDIR+=contrib/libs/intel/core
    ? ($WITH_VALGRIND == "yes") PEERDIR+=contrib/libs/valgrind
    ? ($WITH_VALGRIND == "yes") LDFLAGS+=-fuse-ld=gold
}

MODULE_TYPE=UNKNOWN

PROGRAM: LINK_UNIT {
    module;
    module_symlink_policy=EXE
    $SET(MODULE_TYPE PROGRAM)
    ? ($WIN32 == "yes") MODULE_SUFFIX=.exe;
    ? ($OS_CYGWIN == "yes") MODULE_SUFFIX=.exe;
    ? ($MSVC != "yes" && $NOPLATFORM != "yes" && $WITH_VALGRIND != "yes" && $USE_ASMLIB != "no" && $MIC_ARCH != "yes") PEERDIR+=contrib/libs/asmlib;
    ? ($USE_ARC_PROFILE == "yes" && $NOUTIL != "yes") PEERDIR += library/execprofile/autostart
    ? ($SANITIZER_DEFINED == "yes") PEERDIR += contrib/libs/cxxsupp/libsan
}

EXPORTS_SCRIPT(Arg) {
    $SET(EXPORTS_FILE $Arg)
}

TOOL: PROGRAM {
    module;
    $STRIP();
    # $DISABLE(SANITIZER_TYPE);
}

UNITTEST: PROGRAM {
    module;
    module_node_type=Test
    $PEERDIR(library/unittest/main);
    ? ($UT_SKIP_EXCEPTIONS == "yes") C_DEFINES+=-DUT_SKIP_EXCEPTIONS;
    $ADD_YTEST($REALPRJNAME unittest.py);
}

USE_AFL=no

FUZZ: PROGRAM {
    module;
    module_node_type=Test;
    ? ($USE_AFL == "no") PEERDIR+=contrib/libs/libfuzzer
    ? ($USE_AFL == "yes") PEERDIR+=contrib/libs/libfuzzer/afl
    ? (!$SANITIZER_TYPE || $SANITIZER_TYPE == "no") PEERDIR+=devtools/nofuzz
    $ADD_YTEST($REALPRJNAME fuzz.test);
}

BOOSTTEST: PROGRAM {
    module;
    module_node_type=Test;
    $PEERDIR(library/testing/ya_boost_test)
    $ADD_YTEST($REALPRJNAME boost.test);
}

FUZZ_DICTS_VALUE=
FUZZ_DICTS(Data) {
    $SET_APPEND(FUZZ_DICTS_VALUE $Data)
}

FUZZ_OPTS_VALUE=
FUZZ_OPTS(Data) {
    $SET_APPEND(FUZZ_OPTS_VALUE $Data)
}

TEST_SRCS_VALUE=
TEST_SRCS(Tests) {
    $SET(TEST_SRCS_VALUE $Tests)
}

TEST_DATA_VALUE=
DATA(Data) {
    $SET_APPEND(TEST_DATA_VALUE $Data)
}

TEST_TAGS_VALUE=
TAG(Tags) {
    $SET_APPEND(TEST_TAGS_VALUE $Tags)
}

TEST_REQUIREMENTS_VALUE=
REQUIREMENTS(Tags) {
    $SET(TEST_REQUIREMENTS_VALUE $Tags)
}

TEST_DEPENDS_VALUE=
DEPENDS(Data) {
    $SET_APPEND(TEST_DEPENDS_VALUE $Data)
}

TEST_PYTHON_PATH_VALUE=
PYTHON_PATH(Path) {
    $SET(TEST_PYTHON_PATH_VALUE $Path)
}

LINT_LEVEL_VALUE=base
NO_LINT {
    $SET(LINT_LEVEL_VALUE none)
}
LINT(level) {
    $SET(LINT_LEVEL_VALUE $level)
}

PYTEST_SCRIPT: BASE_UNIT {
    module;
    module_node_type=Test
    $SET(MODULE_SUFFIX .pkg.fake)
    $NO_PLATFORM();
    $ADD_PYTEST_SCRIPT(PY_TEST);
}

PYTEST_COMMON: PY_PROGRAM {
    module;
    module_node_type=Test;
    ? ($USE_ARCADIA_PYTHON == "yes") PEERDIR+=library/python/pytest
    ? ($USE_ARCADIA_PYTHON == "no") MODULE_SUFFIX=.pkg.fake
    ? ($USE_ARCADIA_PYTHON == "no") PEERDIR+=library/python/pytest/empty

    # XXX DEVTOOLS-3210
    ? ($PYTHON_COVERAGE == "yes") PEERDIR+=contrib/python/coverage
}

PYTEST_BIN: PYTEST_COMMON {
    module;
    module_node_type=Test;
    $SETUP_PYTEST_BIN();
}

PYTEST: PYTEST_BIN {

}

YQL_UDF_TEST: PYTEST {
    module;
    $PEERDIR(kikimr/yql/ci/udf_test);
    $DEPENDS(kikimr/yql/tools/yqlrun);
    $DATA(arcadia/kikimr/yql/mount);
}

EXECTEST: PYTEST_COMMON {
    module;
    module_node_type=Test;
    $PEERDIR(library/exectest)
    $SETUP_EXECTEST();
}

BENCHMARK: PROGRAM {
    module;
    $PEERDIR(library/testing/benchmark/main);
}

TEST_ROOT=$(TESTS_DATA_ROOT)
RESULT_MAX_FILE=0
STRIP_FILES=--dont-strip-files
VERIFY_RESULTS=--verify-results
ADDITIONAL_PATH=

# set for tests variables to fill it by YA_DEV or YA
YA_ROOT=ya
?($YA_DEV == "yes") YA_ROOT=ya-dev

UNITTEST_FOR: UNITTEST {
    module;
    $PEERDIR(ADDINCL $UNITTEST_DIR);
    $SRCDIR($UNITTEST_DIR);
}

_LIBRARY: BASE_UNIT {
    module;
    module_cmd=LINK_LIB
    module_node_type=Library
    module_peerdir_policy=as_include
    module_exts=.o .obj .a
    allowed=GRPC

    allowed=EXTRALIBS OBJADDE_GLOBAL
    global=USER_CFLAGS USER_CXXFLAGS LDFLAGS SRCS
    restricted=ALLOCATOR
    #TODO: Remove this hack (really we do not need add fake src at all)
    $ENABLE(NEED_ADD_FAKE_SRC)
    ? ($USE_MKL == "yes") NOPLATFORM=yes
    ? ($MSVC == "yes" || $CYGWIN == "yes") MODULE_PREFIX=
    ? ($MSVC != "yes" && $CYGWIN != "yes") MODULE_PREFIX=lib
    ? ($MSVC == "yes" || $CYGWIN == "yes") MODULE_SUFFIX=.lib
    ? ($MSVC != "yes" && $CYGWIN != "yes") MODULE_SUFFIX=.a
    # TODO: fix WERROR and MSVC_WERROR macros
    ? (($NO_COMPILER_WARNINGS != "yes" && $WERROR != "no") && ($WERROR_MODE == "all" || ($WERROR_MODE == "compiler_specific" && $WERROR == "yes"))) CFLAGS+=$WERROR_FLAG
    ? ($WITH_VALGRIND == "yes") PEERDIR+=contrib/libs/valgrind
    ? ($USER_PREFIX) MODULE_PREFIX=$USER_PREFIX
    ? (($SWIG_LANG == "perl") || ($SWIG_LANG == "java"))SWIG_INTERFACE=
    ? ($SWIG_LANG == "python")SWIG_INTERFACE= -interface $MODULE_PREFIX$REALPRJNAME
    $SET(SWIG_MODNAME $REALPRJNAME)

    ? ($USE_ARCADIA_LIBM == "yes") PEERDIR+=contrib/libs/libm
}

LIBRARY: _LIBRARY {
    ? ($GRPC_FLAG == "yes") PEERDIR+=contrib/libs/grpc
}

FAT_OBJECT: LIBRARY {
    module;
    module_cmd=LINK_FAT_OBJECT;
    $SET(MODULE_SUFFIX .o);
    module_peerdir_policy=as_build_from
}

LINK_ADD=

DLL_UNIT: LINK_UNIT {
    module;
    module_cmd=LINK_DYN_LIB
    module_node_type=Library
    module_symlink_policy=SO
    allowed=EXTRALIBS OBJADDE_GLOBAL
    global=USER_CFLAGS USER_CXXFLAGS LDFLAGS
    $ALLOCATOR(FAKE)
    $DEFAULT(MODULE_PREFIX lib)
    ? ($WINDOWS == "yes") MODULE_PREFIX=
    ? ($USER_PREFIX) MODULE_PREFIX=$USER_PREFIX
    ? (($SWIG_LANG == "perl") || ($SWIG_LANG == "java"))SWIG_INTERFACE=
    ? ($SWIG_LANG == "python")SWIG_INTERFACE= -interface $MODULE_PREFIX$REALPRJNAME
    $SET(SWIG_MODNAME $REALPRJNAME)
    # `-z notext' is needed for linking mkl into shared libraries
    ? ($LINUX == "yes") LDFLAGS += -Wl,-z,notext
    ? ($LINUX == "yes") LINK_ADD+=--fix-elf ${tool:"tools/fix_elf"}
    ? ($MODULE_VERSION) LINK_ADD+=--soname ${output;noext:SONAME}
}

PYMODULE: DLL_UNIT {
    ? ($MSVC != "yes" && $DARWIN != "yes")LDFLAGS+= -Wl,-Bsymbolic
    ? ($USE_ARCADIA_PYTHON == "yes" && $MSVC == "yes" || $IS_CROSS_TOOLS == "yes") PEERDIR+=contrib/tools/python/lib
	? ($USE_ARCADIA_PYTHON == "no" && ($MSVC == "yes" || $CYGWIN == "yes")) LDFLAGS+=$PYTHON_LIBRARIES
    # -bundle
    ? ($DARWIN == "yes") LDFLAGS+=-flat_namespace -undefined dynamic_lookup
    $PYTHON_ADDINCL()
    ? ($MSVC != "yes" && $CYGWIN != "yes") MODULE_PREFIX=
    ? ($USER_PREFIX) MODULE_PREFIX=$USER_PREFIX
    $DEFAULT(MODULE_VERSION)
    ? ($MSVC != "yes" && $CYGWIN != "yes") MODULE_SUFFIX=.so$MODULE_VERSION
    ? ($MSVC == "yes" || $CYGWIN == "yes") MODULE_PREFIX=lib
    ? ($MSVC == "yes" || $CYGWIN == "yes") MODULE_SUFFIX=.pyd$MODULE_VERSION
}

R_MODULE: DLL_UNIT {
    ? ($DARWIN == "yes") LDFLAGS+=-flat_namespace -undefined dynamic_lookup
    $DEFAULT(MODULE_VERSION)
    ? ($MSVC == "yes" || $CYGWIN == "yes") MODULE_PREFIX=lib
    ? ($MSVC == "yes" || $CYGWIN == "yes") MODULE_SUFFIX=.dll
    ? ($MSVC != "yes" && $CYGWIN != "yes") MODULE_SUFFIX=.so$MODULE_VERSION

    $ADDINCL(contrib/libs/r-lang)
}

DLL: DLL_UNIT {
    module;

    $SET(MAKE_ONLY_SHARED_LIB yes);
    ? ($MSVC == "yes" || $CYGWIN == "yes") MODULE_SUFFIX=.dll
    $DEFAULT(MODULE_VERSION)
    ? ($DARWIN == "yes") MODULE_SUFFIX=.dylib$MODULE_VERSION
    ? ($MSVC != "yes" && $DARWIN != "yes" && $CYGWIN != "yes") MODULE_SUFFIX=.so$MODULE_VERSION

    # TODO: Make it possible to use this syntax
    # $DEFAULT(DLL_FOR_DIR no);
    # ? ($DLL_FOR_DIR != "no") $SRCDIR($DLL_FOR_DIR) $ADDINCL($DLL_FOR_DIR);
}

DLL_JAVA: DLL {
    module;
    module_exts=.o .obj .jsrc .java
    module_cmd=SWIG_DLL_JAR_CMD

    $SET(SWIG_LANG java)
}

UDF_BASE: DLL_UNIT  {
    module;
    $PRINT_MODULE_TYPE(UDF $REALPRJNAME);
    ? ($MSVC != "yes" && $DARWIN != "yes")LDFLAGS+= -Wl,-Bsymbolic
    $DEFAULT(MODULE_PREFIX lib)
    ? ($USER_PREFIX) MODULE_PREFIX=$USER_PREFIX
    ? ($MSVC == "yes" || $CYGWIN == "yes") MODULE_SUFFIX=.dll
    $DEFAULT(MODULE_VERSION)
    ? ($DARWIN == "yes") MODULE_SUFFIX=.dylib$MODULE_VERSION
    ? ($MSVC != "yes" && $DARWIN != "yes" && $CYGWIN != "yes") MODULE_SUFFIX=.so$MODULE_VERSION
}

UDF: UDF_BASE {
    $PEERDIR(yweb/robot/kiwi/kwcalc/udflib);
}

UDF_LIB: LIBRARY {
    $PEERDIR(yweb/robot/kiwi/kwcalc/udflib);
}

YQL_UDF: UDF_BASE {
    $PEERDIR(kikimr/yql/library/udf);
    $PEERDIR(kikimr/yql/library/udf/support);
    $SET_APPEND(USER_CXXFLAGS -DBUILD_UDF)
    # For Windows using declspecs
    $DEFAULT(YQL_UDF_EXPORT ${ARCADIA_ROOT}/kikimr/yql/library/udf/udfs_exports.exports)
    ? ($WINDOWS == "yes") YQL_UDF_EXPORT=
    $SET(EXPORTS_FILE $YQL_UDF_EXPORT)
}

YQL_ABI_VERSION(Major, Minor, Patch) {
    YQL_ABI_FLAGS=-DUDF_ABI_VERSION_MAJOR=$Major -DUDF_ABI_VERSION_MINOR=$Minor -DUDF_ABI_VERSION_PATCH=$Patch
    $SET_APPEND(USER_CXXFLAGS $YQL_ABI_FLAGS)
}

YQL_PYTHON_UDF: YQL_UDF {
    proto_policy=PY_PROTO;
    $DEFAULT(YQL_PYTHON_UDF_EXPORT ${ARCADIA_ROOT}/kikimr/yql/udfs/common/python/python_udf/python_udfs_exports.exports)
    ? ($WINDOWS == "yes") YQL_PYTHON_UDF_EXPORT=
    ? ($USE_ARCADIA_PYTHON == "yes") $SET(EXPORTS_FILE $YQL_PYTHON_UDF_EXPORT)
}

# as SRCS in packages use macro BUNDLE_SRCS!

PACKED_PACKAGE_ARGS=
PACKED_PACKAGE_EXT=
PACK(Ext) {
    $SET(PACKED_PACKAGE_EXT $Ext);
}

PACKAGE: BASE_UNIT  {
    module;
    module_peerdir_policy=as_build_from;
    $SET(MODULE_SUFFIX .pkg.fake)
    ? ($PACKED_PACKAGE_EXT) PACKED_PACKAGE_ARGS+=--dest-arch ${output;suf=.$PACKED_PACKAGE_EXT:REALPRJNAME}
    $NO_PLATFORM();
    all_ins_to_out;
    module_cmd=TOUCH_PACKAGE
}

TGZ_PACKAGE: UNION  {
    module;
    $SET(MODULE_SUFFIX .tgz)
}

UNION: BASE_UNIT {
    module;
    $NO_PLATFORM();
    $SET(MODULE_SUFFIX .pkg.fake)
    all_ins_to_out;
}

PY_PACKAGE: UNION {
    module;
    module_exts=.py
    all_ins_to_out;
}

PROTO_LIBRARY: LIBRARY {
}

PY_NAMESPACE_VALUE=
PY_NAMESPACE(Arg) {
    $SET(PY_NAMESPACE_VALUE $Arg)
}

_JAVA_LIBRARY: BASE_UNIT {
    module;
    module_exts=.jsrc .java .jar;
    module_node_type=Bundle;
    module_cmd=COMPILE_JAVA;
    module_peerdir_policy=as_build_from;
    proto_policy=JAVA_PROTO;

    ? ("yes") PROTO_CMD=(File)$JAVA_PROTO_CMD($File)
    ? ("yes") EVLOG_CMD=(File)$JAVA_EVLOG_CMD($File)

    ? ($PACKAGE_PREFIX) PACKAGE_PREFIX_ARGS=--package-prefix=$PACKAGE_PREFIX

    $NO_PLATFORM();
    $SET(MODULE_SUFFIX .jar);
}

JAVA_PROTOBUF=contrib/java/com/google/protobuf/protobuf-java/3.2.0
JAVA_GRPC_STUB=contrib/java/io/grpc/grpc-stub/1.4.0
JAVA_GRPC_PROTOBUF=contrib/java/io/grpc/grpc-protobuf/1.4.0

JAVA_PROTO_LIBRARY: _JAVA_LIBRARY {
    module_exts=.jsrc;
    allowed=GRPC;
    $PEERDIR($JAVA_PROTOBUF);
    ? ($GRPC_FLAG == "yes") PEERDIR+=$JAVA_GRPC_STUB $JAVA_GRPC_PROTOBUF
}


PY_LIBRARY: _LIBRARY {
    proto_policy=PY_PROTO;
    $PYTHON_ADDINCL()
    ? ($MSVC == "yes" || $CYGWIN == "yes") MODULE_PREFIX=py
    ? ($MSVC != "yes" && $CYGWIN != "yes") MODULE_PREFIX=libpy
}

PY_PROGRAM: PROGRAM {
    proto_policy=PY_PROTO;
    ? ($USE_ARCADIA_PYTHON == "yes") PEERDIR+=library/python/runtime/main
    $ALLOCATOR(J)
    $STRIP();
    ? ($SANITIZER_TYPE && $SANITIZER_TYPE != "no") NO_STRIP=yes
}

JAVA_SWIG_DELIM=JAVA_SWIG_DELIM

COMPILE_JAVA=${cwd:ARCADIA_BUILD_ROOT} $YMAKE_PYTHON ${input:"build/scripts/compile_java.py"} --javac-bin $(JDK)/bin/javac --jar-bin $(JDK)/bin/jar $PACKAGE_PREFIX_ARGS --jar-output $TARGET --srcs-jar-output ${output;suf=-sources.jar:REALPRJNAME} $AUTO_INPUT DELIM $PEERS ${kv;hide:"p JV"} ${kv;hide:"pc light-blue"} ${kv;hide:"show_out"} ${kv;hide:"needs_resourceJDK"};
SWIG_DLL_JAR_CMD=${cwd:ARCADIA_BUILD_ROOT} $YMAKE_PYTHON ${input:"build/scripts/build_dll_and_java.py"} $JAVA_SWIG_DELIM $LINK_DYN_LIB $JAVA_SWIG_DELIM $COMPILE_JAVA $JAVA_SWIG_DELIM $AUTO_INPUT $JAVA_SWIG_DELIM $TARGET $JAVA_SWIG_DELIM ${output;suf=.jar:REALPRJNAME} $JAVA_SWIG_DELIM ${output;suf=-sources.jar:REALPRJNAME} $JAVA_SWIG_DELIM $ARCADIA_BUILD_ROOT


METAQUERY: BASE_UNIT  {
    module;
    all_ins_to_out;
    $PRINT_MODULE_TYPE(METAQUERY $REALPRJNAME);
}

ARGS_DELIM="MACRO_CALLS_DELIM"

SYSTEM_PROPERTIES_VALUE=
SYSTEM_PROPERTIES(Args) {
    $SET_APPEND(SYSTEM_PROPERTIES_VALUE $Args)
}

JVM_ARGS_VALUE=
JVM_ARGS(Args) {
    $SET_APPEND(JVM_ARGS_VALUE $Args)
}

CHECK_JAVA_DEPS_VALUE=
CHECK_JAVA_DEPS(Arg) {
    $SET(CHECK_JAVA_DEPS_VALUE $Arg)
}

TEST_CWD_VALUE=
TEST_CWD(Arg) {
    $SET(TEST_CWD_VALUE $Arg)
}

ADD_WAR_VALUE=
ADD_WAR(Args...) {
    $SET_APPEND(ADD_WAR_VALUE $ARGS_DELIM $Args)
}

IDEA_EXCLUDE_DIRS_VALUE=
IDEA_EXCLUDE_DIRS(Args...) {
    $SET_APPEND(IDEA_EXCLUDE_DIRS_VALUE $Args)
}

JAVAC_FLAGS_VALUE=
JAVAC_FLAGS(Args...) {
    $SET_APPEND(JAVAC_FLAGS_VALUE $ARGS_DELIM $Args)
}

ANNOTATION_PROCESSOR_VALUE=
ANNOTATION_PROCESSOR(Args...) {
    $SET_APPEND(ANNOTATION_PROCESSOR_VALUE $ARGS_DELIM $Args)
}

EXCLUDE_VALUE=
EXCLUDE(Args...) {
    $SET_APPEND(EXCLUDE_VALUE $ARGS_DELIM $Args)
}

JAVA_SRCS_VALUE=
JAVA_SRCS(Args...) {
    $SET_APPEND(JAVA_SRCS_VALUE $ARGS_DELIM $Args)
}

JAVA_ADD_DLLS_VALUE=no
ADD_DLLS_TO_JAR() {
    $SET(JAVA_ADD_DLLS_VALUE yes)
}

EXTERNAL_JAR_VALUE=
EXTERNAL_JAR(Args...) {
    $SET_APPEND(EXTERNAL_JAR_VALUE $ARGS_DELIM $Args)
}

DEPENDENCY_MANAGEMENT_VALUE=
DEPENDENCY_MANAGEMENT(Args...) {
    $SET_APPEND(DEPENDENCY_MANAGEMENT_VALUE $ARGS_DELIM $Args)
}

JAVA_PLACEHOLDER: BASE_UNIT  {
    module;
    $NO_PLATFORM();
    module_cmd=TOUCH_JAVA_UNIT;
    proto_policy=JAVA_PROTO;
    $JAVA_MODULE();
}

JAVA_PROGRAM: JAVA_PLACEHOLDER {
    $SET(MODULE_TYPE JAVA_PROGRAM)
}

JAVA_LIBRARY: JAVA_PLACEHOLDER {
    $SET(MODULE_TYPE JAVA_LIBRARY)
}

JTEST: JAVA_PLACEHOLDER {
    $SET(MODULE_TYPE JTEST);
    $DEPENDS(devtools/junit-runner devtools/jacoco-agent)
    $JAVA_TEST()
}

JTEST_FOR: JTEST {
    $SET(MODULE_TYPE JTEST_FOR);
    $INTERNAL_RECURSE($UNITTEST_DIR);
    $SET(REALPRJNAME jtest)
    $JAVA_TEST()
}

SANDBOX_TASK: BASE_UNIT  {
    module;
    $NO_PLATFORM()
    $ALLOCATOR(FAKE)
}

PYTHON_ADDINCL {
    ? ($USE_ARCADIA_PYTHON != "yes") CFLAGS+=$PYTHON_INCLUDE;
    ? ($USE_ARCADIA_PYTHON == "yes") ADDINCL+=contrib/tools/python/src/Include contrib/tools/python/src;
}

USE_PYTHON {
    $PYTHON_ADDINCL()
    ? ($USE_ARCADIA_PYTHON != "yes") CFLAGS+=$PYTHON_FLAGS;
    ? ($USE_ARCADIA_PYTHON != "yes") LDFLAGS+=$PYTHON_LDFLAGS;
    ? ($USE_ARCADIA_PYTHON != "yes") OBJADDE+=$PYTHON_LIBRARIES;
    ? ($USE_ARCADIA_PYTHON == "yes") PEERDIR+=contrib/tools/python/lib;
}

? (($PERLXS == "yes") || ($PERLXSCPP == "yes") || ($USE_PERL == "yes")) PEERDIR+=contrib/libs/perl-core

USE_PERL_LIB {
    $PEERDIR(contrib/libs/perl-core);
}

ALLOCATOR(Alloc) {
     $SET(ALLOCATOR $Alloc);
}

ADD_PERL_MODULE(Dir, Module) {
    $PEERDIR($Dir);
    $SET_APPEND(modules $Module);
}

#LINK_STATICALLY=yes

? ($MIC_ARCH == "yes") CFLAGS+=-mmic
? ($MIC_ARCH == "yes") LDFLAGS+=-mmic
? ($USE_OPENMP == "yes") PEERDIR+=contrib/libs/openmp

? (($STRIP == "yes") && ($NO_STRIP != "yes")) STRIP_FLAG=$LD_STRIP_FLAG

BYK_NAME(BykName) {
    $SET(__byk_name ${tolower:BykName});
    $SET(__byk_lister ${BINDIR}/${__byk_name}.list);
}

EXTRALIBS_STATIC(Args...) {
    $LDFLAGS(-Wl,-Bstatic ${Args} -Wl,-Bdynamic)
}

ADD_COMPILABLE_BYK(Prefixes, MakeBykOptions...) {
    $SET(__bykname_upper ${toupper:__byk_name});
    $SET(__bykname_lower ${tolower:__byk_name});

    $SET(__make_byk_lister ${BINDIR}/${__bykname_lower}.list);
    $SET(__make_byk_current_zip ${BINDIR}/${__bykname_lower}.image.gz);
    $SET(__make_byk_current_cpp ${BINDIR}/bykimage.${__bykname_lower}.cpp);

    $RUN_PROGRAM(dict/tools/make_byk ${MakeBykOptions} ${__bykname_lower} ${Prefixes} ${__make_byk_lister} CWD ${BINDIR} IN ${__make_byk_lister} ${Prefixes} OUT ${__make_byk_current_zip});
    $RUN_PROGRAM(dict/tools/byktocpp Byk${__byk_name} ${__make_byk_current_zip} ${__make_byk_current_cpp} IN ${__make_byk_current_zip} OUT ${__make_byk_current_cpp});
}

ADD_COMPILABLE_TRANSLATE(Dict, Name, MakeTransDictOptions...) {
     __translatename_lower=${tolower:Name};
     __translate_dict=${BINDIR}/transdict.${__translatename_lower}.cpp;
     $RUN_PROGRAM(dict/tools/maketransdict ${MakeTransDictOptions} ${Name} STDIN ${Dict} STDOUT ${__translate_dict});
}

ADD_COMPILABLE_TRANSLIT(TranslitTable, NGrams, Name, Options...) {
     __translitname_lower=${tolower:Name};
     __translit_table=${BINDIR}/translit_trie_${__translitname_lower}.cpp
     __untranslit_table=${BINDIR}/untranslit_trie_${__translitname_lower}.cpp
     __ngrams_table=${BINDIR}/ngr_arr_${__translitname_lower}.cpp
     __gentrie_dir=dict/tools/make_untranslit_trie

     $RUN_PROGRAM(${__gentrie_dir} ${Options} ${__translitname_lower} STDIN ${TranslitTable} STDOUT ${__untranslit_table});
     $RUN_PROGRAM(${__gentrie_dir} -i ${Options} ${__translitname_lower} STDIN ${TranslitTable} STDOUT ${__translit_table});
     $RUN_PROGRAM(dict/tools/make_ngrams ${Options} ${__translitname_lower} STDIN ${NGrams} STDOUT ${__ngrams_table});
}

GENERATE_PY_PROTOS(SRC...) {
    foreach_in=SRC;
    [.*]=$PY_PROTO_CMD($SRC);
}

COPY_FILE(File, Destination)=$COPY_CMD ${input:File} ${output;noauto:Destination} ${kv;hide:"p CP"} ${kv;hide:"pc light-cyan"}
BUNDLE_PROGRAM(Prog, Destination)=$MOVE_FILE ${tool:Prog} ${output:Destination} ${kv;hide:"p BN"} ${kv;hide:"pc light-cyan"}

TIMEOUT(Time) {
    $SET(TEST_TIMEOUT $Time)
}

TEST_FORK_MODE=none

FORK_TESTS {
    $SET(TEST_FORK_MODE tests)
}

FORK_SUBTESTS {
    $SET(TEST_FORK_MODE subtests)
}

SPLIT_FACTOR(Factor) {
    $SET(TEST_SPLIT_FACTOR $Factor)
}

FORK_TEST_FILES_MODE=off
FORK_TEST_FILES {
     $SET(FORK_TEST_FILES_MODE on)
}

TEST_SIZE_NAME=SMALL

SIZE(Type) {
    $SET(TEST_SIZE_NAME $Type)
}

JOIN_SRCS(Out, Src...) {
    cmd=$YMAKE_PYTHON ${input:"build/scripts/gen_join_srcs.py"} ${output:Out} ${input;rootrel:Src} ${output_include;hide:Src} ${kv;hide:"p JS"} ${kv;hide:"pc magenta"};
    # $SRCS($Src);
}

SRCS(SRC...) {
    foreach_in=SRC;
    [.S,.s]=$GCCFILTER $C_COMPILER $TARGET_OPT -c -o ${output:SRC.o} ${input:SRC} ${pre=-I:INCLUDE} ${kv;hide:"p CC"} ${kv;hide:"pc light-green"} $COMPILER_ENV
    [.mm]=$GCCFILTER $C_COMPILER -x objective-c++ -fobjc-arc -fobjc-abi-version=2 $TARGET_OPT -c -o ${output:SRC.o} ${input:SRC} $CXXFLAGS ${pre=-I:INCLUDE} ${kv;hide:"p CC"} ${kv;hide:"pc light-green"} $COMPILER_ENV
    [.fml]=$FML_TOOL $CHECKFLAG -b -o ${output:SRC.inc} -T ${input:SRC} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"};
    [.fml2]=$FML_TOOL $CHECKFLAG -b -o ${output;noext:SRC.fml.inc} -2 -O ${output;noext:SRC.fml.cpp} -T ${input:SRC} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"};
    [.fml3]=$FML_TOOL $CHECKFLAG -b -o ${output;noext:SRC.fml.inc} -3 -O ${output;noext:SRC.fml.cpp} -L ${input;noext:SRC.list} -P ${noext:SRC} -T ${input:SRC} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"};
    [.sfdl]=$CXX_COMPILER $CXXFLAGS $SFDL_FLAG ${input:SRC} && ${tool:"tools/calcstaticopt"} -i ${tmp:SRC.tmp} -a $ARCADIA_ROOT ${output;stdout;noext;defext=.inc:SRC} ${kv;hide:"p SF"} ${kv;hide:"pc yellow"} $COMPILER_ENV;
    [.cu] {
        cmd=$YMAKE_PYTHON ${input:"build/scripts/compile_cuda.py"} $NVCC $NVCCOPTS -c ${input:SRC} -o ${output:SRC.o} --cflags $CFLAGS ${kv;hide:"p CC"} ${kv;hide:"pc light-green"};
        peerdir=contrib/libs/nvidia/cudalib;
    }
    [.xs]=$PERL ${suf=/xsubpp:EXTUTILS} -typemap ${suf=/typemap:EXTUTILS} $PERLSUFFIX $XSUBPPFLAGS ${input:SRC} ${stdout;output:SRC.cpp} ${kv;hide:"p XS"} ${kv;hide:"pc yellow"};
    # [.y,.ypp]=${tool:"contrib/tools/byacc"} $BYACC_FLAGS ${noext;output:SRC.cpp} ${input:SRC} ${noext;hide;output;addincl:SRC.h} ${kv;hide:"p YC"} ${kv;hide:"pc light-green"};
    [.y,.ypp]=${tool:"contrib/tools/bison/bison"} $BISON_FLAGS --m4=${tool:"contrib/tools/bison/m4"} -d -o ${noext;output:SRC.cpp} ${input:SRC} && $YMAKE_PYTHON ${input:"build/scripts/preprocess.py"} ${noext;output;addincl:SRC.h} ${kv;hide:"p YC"} ${kv;hide:"pc light-green"};
    [.gperf]=$RUN_NO_SANITIZE ${tool:"contrib/tools/gperf"} $GP_FLAGS ${pre=-Nin_;suf=_set;noallext:SRC} ${input:SRC} ${output;stdout;noext;defext=.gperf.cpp:SRC} ${kv;hide:"p GP"} ${kv;hide:"pc yellow"};
    [.rl, .rl5]=$RUN_NO_SANITIZE ${tool:"contrib/tools/ragel5/ragel"} $RAGEL_FLAGS -o ${tmp:SRC.tmp} ${input:SRC} && $RUN_NO_SANITIZE ${tool:"contrib/tools/ragel5/rlgen-cd"} $RLGEN_FLAGS -o ${output;noext;defext=.cpp:SRC} ${tmp:SRC.tmp} ${kv;hide:"p R5"} ${kv;hide:"pc yellow"};
    [.asp]=$RUN_NO_SANITIZE ${tool:"tools/html2cpp"} ${input:SRC} ${output:SRC.cpp} ${kv;hide:"p HT"} ${kv;hide:"pc yellow"};
    [.rl6]=$RUN_NO_SANITIZE ${tool:"contrib/tools/ragel6"} $RAGEL6_FLAGS -I${ARCADIA_ROOT} -o ${output;noext;defext=.rl6.cpp:SRC} ${input:SRC} ${kv;hide:"p R6"} ${kv;hide:"pc yellow"};
    [.l,.lex,.lpp] {
        cmd=${tool:"contrib/tools/flex-old"} $LEX_FLAGS -o${output:SRC.cpp} ${output_include;hide:"util/system/compiler.h"} ${input:SRC} ${kv;hide:"p LX"} ${kv;hide:"pc yellow"};
        addincl=contrib/tools/flex-old;
    }
    [.pln]=$FML_TOOL -b -o ${output;pre=pln.;noext:SRC.cpp} -f ${input:SRC} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"};
    [.xsyn]=$YMAKE_PYTHON ${input:"library/xml/parslib/xsyn2ragel.py"} ${input:SRC} ${input:"library/xml/parslib/xmlpars.xh"} dontuse ${output;stdout:SRC.h.rl5} ${kv;hide:"p XN"} ${kv;hide:"pc yellow"};
    [.ev] {
        cmd=$EVLOG_CMD($SRC);
    }
    [.proto] {
        cmd=$PROTO_CMD($SRC);
    }
    [.gztproto] {
        # PROTO_PATH is before ARCADIA_ROOT in includes because in gazetteer we don't use builtins now and paths'canonization (resolving) depends on order of roots.
        # descriptor.proto must be resolved as google/protobuf/descriptor.proto
        cmd=${tool:"dict/gazetteer/compiler"} -p -I$PROTO_PATH -I$ARCADIA_ROOT ${input:SRC} ${output;noext:SRC.proto} ${kv;hide:"p GZ"} ${kv;hide:"pc yellow"};
        peerdir=kernel/gazetteer
    }
    # Copy-paste from BUILDWITH_CYTHON
    [.pyx] {
        cmd=$YMAKE_PYTHON $CYTHON_SCRIPT --cplus -I$ARCADIA_ROOT ${input:SRC} -o ${output;tobindir:SRC.cpp} $CYTHON_OUTPUT_INCLUDES ${kv;hide:"p CY"} ${kv;hide:"pc yellow"};
        addincl=contrib/tools/cython/Cython/Includes;
    }
    [.in]=$CONFIGURE_FILE(${SRC} ${noext:SRC})
    [.sc]=${tool:"tools/domschemec"} --in ${input:SRC} --out ${output:SRC.h} ${output_include;hide:"util/generic/strbuf.h"} ${output_include;hide:"util/generic/string.h"} ${output_include;hide:"util/generic/vector.h"} ${output_include;hide:"util/string/cast.h"} ${kv;hide:"p SC"} ${kv;hide:"pc yellow"};
    [.external]=$YMAKE_PYTHON ${input:"build/scripts/fetch_from_external.py"} ${input:SRC} ${output;noext:SRC} ${kv;hide:"p CC"} ${kv;hide:"pc light-green"};
    [.f] {
         cmd=$YMAKE_PYTHON ${input:"build/scripts/f2c.py"} -t ${tool:"contrib/tools/f2c"} -c ${input:SRC} -o ${output:SRC.c} ${kv;hide:"p FT"} ${kv;hide:"pc light-green"};
         peerdir=contrib/libs/libf2c;
         addincl=contrib/libs/libf2c;
    }
}

# TODO: use it in [.pyx] cmd
BUILDWITH_CYTHON_CPP(Src, Options...) {
    cmd=$YMAKE_PYTHON $CYTHON_SCRIPT ${Options} --cplus -I$ARCADIA_ROOT ${input:Src} -o ${output;tobindir:Src.cpp} $CYTHON_OUTPUT_INCLUDES ${kv;hide:"p CY"} ${kv;hide:"pc yellow"};
    $ADDINCL(contrib/tools/cython/Cython/Includes);
}

BUILDWITH_CYTHON_C(Src, Options...) {
    cmd=$YMAKE_PYTHON $CYTHON_SCRIPT ${Options} -I$ARCADIA_ROOT ${input:Src} -o ${output;tobindir:Src.c} $CYTHON_OUTPUT_INCLUDES ${kv;hide:"p CY"} ${kv;hide:"pc yellow"};
    $ADDINCL(contrib/tools/cython/Cython/Includes);
}

BUILDWITH_RAGEL6(Src, Options...)=$RUN_NO_SANITIZE ${tool:"contrib/tools/ragel6"} $RAGEL6_FLAGS ${Options} -I${ARCADIA_ROOT} -o ${output;noext;defext=.rl6.cpp:Src} ${input:Src} ${kv;hide:"p R6"} ${kv;hide:"pc yellow"};

# TODO: use it in [.pyx] cmd
_PY_REGISTER(Func) {
    cmd=$YMAKE_PYTHON ${input:"build/scripts/gen_py_reg.py"} $Func ${output;noauto:Func.reg.cpp} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"};
    $SRCS(GLOBAL $Func.reg.cpp);
}

PY_COMPILE_BYTECODE(SrcX, Src)=$YMAKE_PYTHON ${input:"build/scripts/py_compile.py"} $SrcX ${input:Src} ${output;noauto:Src.yapyc} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"};

ARCHIVE_ASM(Files...) {
    cmd=$ARCH_TOOL -q $DONTCOMPRESS ${input;join=\: :Files}: -o ${output;chksum;suf=.rodata:NAME} ${kv;hide:"p AR"} ${kv;hide:"pc light-cyan"};
    NAME=arg(1);
    DONTCOMPRESS=arg(0)? "-p" : ;
}

PIRE_INLINE(SRC...) {
    foreach_in=SRC;
    [.*]=${tool:"library/regex/pire/inline"} -o ${output:SRC} ${input:SRC} ${output_include;hide:SRC} ${kv;hide:"p PI"} ${kv;hide:"pc yellow"};
}

ARCHIVE(Files...) {
    cmd=$ARCH_TOOL -q -x $DONTCOMPRESS ${input;join=\: :Files}: -o ${output;chksum;addincl;noauto:NAME} ${kv;hide:"p AR"} ${kv;hide:"pc light-red"};
    NAME=arg(1);
    DONTCOMPRESS=arg(0)? "-p" :;
}

ARCHIVE_BY_KEYS(Files...) {
    cmd=$ARCH_TOOL -q -x $DONTCOMPRESS ${input:Files} -k $KEYS -o ${output;chksum;addincl;noauto:NAME} ${kv;hide:"p AR"} ${kv;hide:"pc light-red"};
    NAME=arg(1);
    KEYS=arg(1);
    DONTCOMPRESS=arg(0)? "-p" :;
}

#scripts

BUILD_MN_SCRIPT=build/scripts/build_mn.py
BUILD_MN_SCRIPT {
    include_cpp;
}

#special commands
SVNVERSION_SCRIPT=build/scripts/svn_version_gen.py
BUILDVERSION_SCRIPT=build/scripts/build_info_gen.py
SVNVERSION_JAVA_MARKER=output-java-class

CREATE_SVNVERSION_FOR(Unused, GenHdr)=$YIELD $ARCADIA_ROOT && $YIELD $ARCADIA_BUILD_ROOT && $YIELD ${quo:YMAKE_PYTHON} && $XARGS $YMAKE_PYTHON ${input:SVNVERSION_SCRIPT} ${output;chksum:GenHdr} $SVN_DEPENDS ${kv;hide:"p SV"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"}
CREATE_JAVA_SVNVERSION_FOR(GenHdr)=$YIELD $SVNVERSION_JAVA_MARKER && $YIELD $ARCADIA_ROOT && $YIELD $ARCADIA_BUILD_ROOT && $YIELD ${quo:YMAKE_PYTHON} && $XARGS $YMAKE_PYTHON ${input:SVNVERSION_SCRIPT} ${output;chksum:GenHdr} $SVN_DEPENDS ${kv;hide:"p SV"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"}
CREATE_BUILDINFO_FOR(GenHdr)=$YIELD $CXX_COMPILER && $YIELD $CXXFLAGS && $XARGS $YMAKE_PYTHON ${input:BUILDVERSION_SCRIPT} ${output:GenHdr} ${kv;hide:"p BI"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"}

LAST_CHANGED_REV_SCRIPT=build/scripts/last_changed_rev.py
LAST_CHANGED_REV_FIXED=

LAST_CHANGED_REV(Hdr, Opts...)=$YMAKE_PYTHON ${input:LAST_CHANGED_REV_SCRIPT} --python-path=${quo:YMAKE_PYTHON} --fixed-rev=${LAST_CHANGED_REV_FIXED} --source-root=$ARCADIA_ROOT $Opts ${output;stdout;chksum:Hdr} ${kv;hide:"p SV"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"} $SVN_DEPENDS

CONFIGURE_FILE(Src, Dst)=$YMAKE_PYTHON ${input:"build/scripts/configure_file.py"} ${input:Src} ${output;addincl:Dst} $CFG_VARS ${kv;hide:"p CF"} ${kv;hide:"pc yellow"}
CFG_VARS {
    gen_from_file;
}

BASE_CODEGEN(Tool, Prefix, Opts...)= ${tool:Tool} ${input:Prefix.in} ${output;nopath;noauto:Prefix.cpp} ${output;nopath:Prefix.h} $Opts ${kv;hide:"p BC"} ${kv;hide:"pc yellow"}

SPLIT_CODEGEN_BASE(Tool, Prefix) {
    cmd=${tool:Tool} ${input:Prefix.in} ${output;hide:OUT} ${output;nopath;noauto:Prefix.cpp} ${output;nopath:Prefix.h} $OPTS ${output_include;hide:OUTPUT_INCLUDES} ${kv;hide:"p SC"} ${kv;hide:"pc yellow"}
    OUT=arg(1+);
    OPTS=arg(1+);
    OUTPUT_INCLUDES=arg(1+);
}

STRUCT_CODEGEN(Prefix) {
    cmd=$BASE_CODEGEN(kernel/struct_codegen/codegen_tool, $Prefix)
    src=.proto;
    include=kernel/struct_codegen/codegen_tool/main.cpp;
    peerdir=kernel/struct_codegen/metadata;
    peerdir=kernel/struct_codegen/reflection;
}

DUMPERF_CODEGEN(Prefix)=$BASE_CODEGEN(extsearch/images/robot/tools/dumperf/codegen, $Prefix, ${output_include;hide:"extsearch/images/kernel/erf/erf_format.h"})

CFLAGS(Flags...) {
   $SET_APPEND_WITH_GLOBAL(USER_CFLAGS $Flags);
}

MASMFLAGS(Flags...) {
   $SET_APPEND(MASMFLAGS $Flags);
}

CONLYFLAGS(Flags...) {
   $SET_APPEND_WITH_GLOBAL(USER_CONLYFLAGS $Flags);
}

CXXFLAGS(Flags...) {
   $SET_APPEND_WITH_GLOBAL(USER_CXXFLAGS $Flags);
}

CUDA_NVCC_FLAGS(Flags...) {
   $SET_APPEND(CUDA_NVCC_FLAGS $Flags);
   $ENABLE(USE_CUDA)
}

STRIP {
    $ENABLE(STRIP)
}

NO_OPTIMIZE {
    $ENABLE(NO_OPTIMIZE);
}

NO_COMPILER_WARNINGS {
    $ENABLE(NO_COMPILER_WARNINGS);
    $ENABLE(NO_WSHADOW)
}

WERROR {
    # TODO: fix WERROR and MSVC_WERROR macros
    # ? ($MSVC != "yes") $ENABLE(WERROR);
    $ENABLE(WERROR);
}

NO_WERROR {
    $DISABLE(WERROR);
}

NO_WSHADOW {
    $ENABLE(NO_WSHADOW);
}

NO_UTIL {
    $ENABLE(NOUTIL);
}

NO_RUNTIME {
    $SET(USE_ARCADIA_LIBM no)
    $NO_UTIL();
    $ENABLE(NORUNTIME);
}

NO_PLATFORM {
    $NO_LIBC();
    $ENABLE(NOPLATFORM);
}

NO_LIBC {
    $NO_RUNTIME();
    $ENABLE(NOLIBC);
    $DISABLE(MUSL);
}

NO_JOIN_SRC {
    $ENABLE(NOJOINSRC);
}

NO_SANITIZE {
    $DISABLE(SANITIZER_TYPE);
}

NO_SANITIZE_COVERAGE {
    $DISABLE(SANITIZE_COVERAGE);
}

JOINSRC {
    $ENABLE(JOINSRC);
}

LUAJIT_PATH=$ARCADIA_ROOT/contrib/libs/luajit/
LUAJIT_OBJDUMP(Src) {
   cmd=${cwd:LUAJIT_PATH} ${tool:"contrib/libs/luajit/compiler"} -b -g ${input:Src} ${output;noauto:OUT} ${kv;hide:"p LJ"} ${kv;hide:"pc light-cyan"}
   OUT=arg(1);
}

MX_BIN_TO_INFO(Src)= ${tool:"tools/mx_bin2info"} ${input:Src} ${output;noext;noauto:Src.info} ${kv;hide:"p MX"} ${kv;hide:"pc yellow"}

MX_GEN_TABLE_INCLS=${output_include;hide:"yabs_mx_calc_table.h"} \
${output_include;hide:"kernel/matrixnet/mn_sse.h"} \
${output_include;hide:"library/archive/yarchive.h"} \
${output_include;hide:"util/memory/blob.h"} \
${output_include;hide:"util/generic/hash.h"} \
${output_include;hide:"util/generic/ptr.h"} \
${output_include;hide:"util/generic/singleton.h"}

MX_GEN_TABLE(Srcs...) {
   cmd=$YMAKE_PYTHON ${input:"build/scripts/gen_mx_table.py"} $Srcs ${output;stdout:"mx_tables.cpp"} $MX_GEN_TABLE_INCLS ${kv;hide:"p MX"} ${kv;hide:"pc yellow"}
   $PEERDIR(kernel/matrixnet)
   $PEERDIR(library/archive)
}

RELEV_FML_CODEGEN_INCLS=${output_include;hide:"kernel/relevfml/relev_fml.h"} ${output_include;hide:"library/sse2neon/sse_adhoc.h"}

GENERATE_ENUM_SERIALIZATION(File)= $ENUM_PARSER_TOOL ${input:File} --include-path ${input;rootrel:File} --output ${output;chksum;suf=_serialized.cpp:File} ${output_include;hide:File} ${output_include;hide:"util/generic/serialized_enum.h"} ${kv;hide:"p EN"} ${kv;hide:"pc yellow"}
GENERATE_ENUM_SERIALIZATION_WITH_HEADER(File) {
    cmd=$ENUM_PARSER_TOOL ${input:File} --include-path ${input;rootrel:File} --output ${output;chksum;suf=_serialized.cpp:File} --header ${output;chksum;suf=_serialized.h:File} ${output_include;hide:File} ${kv;hide:"p EN"} ${kv;hide:"pc yellow"}
}

DEB_VERSION(File)= $YMAKE_PYTHON ${input:"build/scripts/mkver.py"} ${input:File} ${output;stdout:"DebianVersion.h"} ${kv;hide:"p CL"} ${kv;hide:"pc yellow"}

BUILD_MN(MnInfo, MnName){
    cmd=$YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnF $ARCADIA_ROOT $ARCH_TOOL ${input:MnInfo} $MnName ranking_suffix=$RANKING_SUFFIX ${output;chksum;pre=mn.:MnName.cpp} ${output;hide;pre=MN_External_;suf=.rodata:MnName} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} $CHECK $MULTI $PTR ${kv;hide:"p MN"} ${kv;hide:"pc yellow"};
    CHECK=arg(0) ? "fml_tool=$FML_UNUSED_TOOL CHECK" :;
    MULTI=arg(0);
    PTR=arg(0);
    RANKING_SUFFIX=arg(1);
}

BUILD_MNS_FILE(Input, Name, Output, Suffix, Check, Fml_tool, AsmDataName) {
   cmd=$YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnsFilesF $ARCADIA_ROOT $BINDIR $ARCH_TOOL fml_tool=$Fml_tool $Name ranking_suffix=$Suffix ${input:Input} ${output;hide:Output} ${output;hide;pre=MN_External_;suf=.rodata:AsmDataName} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} ${kv;hide:"p MN"} ${kv;hide:"pc yellow"};
}

MNS_OUTPUT=mnmodels

BUILD_MNS_CPP(Files...) {
    cmd=$YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnsCppF $NAME ranking_suffix=$RANKING_SUFFIX ${input:MNS_OUTPUT.h} ${output:MNS_OUTPUT.cpp} ${input:Files} ${output_include;hide:MNS_OUTPUT.h} ${kv;hide:"p MN"} ${kv;hide:"pc yellow"};
    NAME=arg(1);
    CHECK=arg(0);
    RANKING_SUFFIX=arg(1);
}

BUILD_MNS_HEADER(Files...) {
    cmd=$YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnsHeaderF $NAME ranking_suffix=$RANKING_SUFFIX ${output:MNS_OUTPUT.h} ${input:Files} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} ${output_include;hide:"kernel/matrixnet/mn_multi_categ.h"} ${kv;hide:"p MN"} ${kv;hide:"pc yellow"};
    NAME=arg(1);
    CHECK=arg(0);
    RANKING_SUFFIX=arg(1);
}

# TODO: support foreach_in and keywords simultaneous usage (look at BUILD_MNS_FILES)

BUILD_MNS(Files...){
    $BUILD_MNS_HEADER($Files)
    $BUILD_MNS_CPP($Files)
    $BUILD_MNS_FILES($Files)
}

NEED_REVIEW(Flags...) {
    # TODO: FIXME
    $ENABLE(UNUSED_MACRO)
}

LICENSE(Flags...) {
    $ENABLE(UNUSED_MACRO)
}

VERSION(Flags...) {
    $ENABLE(UNUSED_MACRO)
}

BUILD_PLNS(Src...) {
    cmd=$YMAKE_PYTHON ${input:"build/scripts/build_pln_header.py"} ${output:"plnmodels.h"} ${input:Src} $RELEV_FML_CODEGEN_INCLS ${kv;hide:"p PN"} ${kv;hide:"pc yellow"}
    peerdir=kernel/relevfml library/sse2neon;
}

DATAWORK_SCHEEME_EXPORT_FLAGS=
? ($UNIX == "yes") SCHEEME2_CFLAGS= -E -x c++
? ($WIN32 == "yes") SCHEEME2_CFLAGS= /E /TP
SCHEEME2_STRUCT_INFO_FLAGS=-f "const static ui32 RecordSig" -u "RecordSig" --gcc44_no_typename --no_complex_overloaded_func_export
GEN_SCHEEME2(ScheemeName FromFile)= $GCCFILTER $CXX_COMPILER -c ${tmp;stdout:FromFile.cph} $SCHEEME2_CFLAGS ${input:FromFile} ${pre=-I:INCLUDE} $CXXFLAGS -Wno-error && ${tool:"tools/structparser"} -o ${output:ScheemeName.inc} -n N${ScheemeName}SchemeInfo $SCHEEME2_STRUCT_INFO_FLAGS $DATAWORK_SCHEEME_EXPORT_FLAGS ${tmp:FromFile.cph} ${output;stdout;noauto:ScheemeName.inc.log} ${kv;hide:"p SH"} ${kv;hide:"pc yellow"}

SYMLINK(From, To)=$YMAKE_PYTHON ${input:"build/scripts/symlink.py"} ${input;dirallowed:From} ${output;noauto:To} ${kv;hide:"p LN"} ${kv;hide:"pc light-cyan"}

SCRIPT(Tool, ScriptPath, Args...) {
    cmd=${cwd:CWD} ${tool:Tool} ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p SC"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"};
    IN=arg(input:1+);
    OUT=arg(output:1+);
    OUT_NOAUTO=arg(output:1+);
    TOOL=arg(tool:1+);
    OUTPUT_INCLUDES=arg(1+);
    IN_DEPS=arg(1+);
    STDOUT=arg(1);
    STDIN=arg(1);
    CWD=arg(1);
}

LUA(ScriptPath, Args...) {
    cmd=${cwd:CWD} $LUA_TOOL ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p LU"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"};
    IN=arg(input:1+);
    OUT=arg(output:1+);
    OUT_NOAUTO=arg(output:1+);
    TOOL=arg(tool:1+);
    OUTPUT_INCLUDES=arg(1+);
    IN_DEPS=arg(1+);
    STDOUT=arg(1);
    STDIN=arg(1);
    CWD=arg(1);
}

PYTHON(ScriptPath, Args...) {
    cmd=${cwd:CWD} $PYTHON_BS_TOOL ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"};
    IN=arg(input:1+);
    OUT=arg(output:1+);
    OUT_NOAUTO=arg(output:1+);
    TOOL=arg(tool:1+);
    OUTPUT_INCLUDES=arg(1+);
    IN_DEPS=arg(1+);
    STDOUT=arg(1);
    STDIN=arg(1);
    CWD=arg(1);
}

BUILTIN_PYTHON(ScriptPath, Args...) {
    cmd=${cwd:CWD} $YMAKE_PYTHON ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"};
    IN=arg(input:1+);
    OUT=arg(output:1+);
    OUT_NOAUTO=arg(output:1+);
    TOOL=arg(tool:1+);
    OUTPUT_INCLUDES=arg(1+);
    IN_DEPS=arg(1+);
    STDOUT=arg(1);
    STDIN=arg(1);
    CWD=arg(1);
}

SETUP_FROM_SANDBOX(Id, Args...) {
    cmd=${cwd:BINDIR} $YMAKE_PYTHON  ${input:"build/scripts/fetch_from_sandbox.py"} --resource-id $Id $FILE . ${output_include;hide:OUTPUT_INCLUDES} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${kv;hide:"p SB"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"};
    OUT=arg(output:1+);
    OUT_NOAUTO=arg(output:1+);
    OUTPUT_INCLUDES=arg(1+);
    FILE=arg(0)? "--copy-to-dir" : "--untar-to";
}

RUN_JAVA(Args...) {
    cmd=${cwd:CWD} $YMAKE_PYTHON ${input:HIDE_OUTPUT} $(JDK)/bin/java $Args ${input;hide:IN} ${output_include;hide:OUTPUT_INCLUDES} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p JV"} ${kv;hide:"pc light-blue"} ${kv;hide:"show_out"} ${kv;hide:"needs_resourceJDK"};
    IN=arg(input:1+);
    OUT=arg(output:1+);
    OUT_NOAUTO=arg(output:1+);
    OUTPUT_INCLUDES=arg(1+);
    STDOUT=arg(1);
    STDIN=arg(1);
    CWD=arg(1);
    HIDE_OUTPUT=arg(0)? "build/scripts/stderr2stdout.py" : "build/scripts/stdout2stderr.py";
}

RUN_PROGRAM(Tool, Args...) {
    cmd=${cwd:CWD} ${tool:Tool} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p PR"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"};
    IN=arg(input:1+);
    OUT=arg(output:1+);
    OUT_NOAUTO=arg(output:1+);
    TOOL=arg(tool:1+);
    OUTPUT_INCLUDES=arg(1+);
    IN_DEPS=arg(1+);
    STDOUT=arg(1);
    STDIN=arg(1);
    CWD=arg(1);
}

C_AS_CXX_FLAGS=-x c++ -std=c++14

COMPILE_C_AS_CXX {
    $SET(EXTRA_C_FLAGS $C_AS_CXX_FLAGS);
}

NO_DEBUG_INFO {
    $SET(NO_DEBUGINFO yes)
}


IMPORT_YMAPS_PROTO {
     YMAPS_PROTO_ROOT=maps/doc/proto
     YMAPS_PROTOC_INCLUDE=-I=$ARCADIA_ROOT/$YMAPS_PROTO_ROOT
     $SET_APPEND(PROTO_PATH $YMAPS_PROTOC_INCLUDE)
     $ADDINCL($YMAPS_PROTO_ROOT)
     $ADDINCL(GLOBAL ${ARCADIA_BUILD_ROOT}/$YMAPS_PROTO_ROOT)
}

EXPORT_YMAPS_PROTO {
    $SET(PROTO_NAMESPACE maps/doc/proto)
    $IMPORT_YMAPS_PROTO();
}

YMAPS_GENERATE_SPROTO_HEADER(File) {
    cmd=${cwd;rootdir;input:File} ${tool:"maps/libs/sproto/sprotoc"} -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --sproto_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${input;rootrel:File} ${output;hide;norel;noext:File.sproto.h} ${kv;hide:"p PB"} ${kv;hide:"pc yellow"};
    peerdir=maps/libs/sproto;
}

YMAPS_SPROTO(SRC...) {
    foreach_in=SRC;
    [.proto]=$YMAPS_GENERATE_SPROTO_HEADER($SRC);
}

LLVM_OPTS=
CLANG_ROOT=$(CLANG37)

LLVM_COMPILE_CXX(Input, Output, Opts...) {
    $PEERDIR(contrib/libs/clang)
    cmd=$YMAKE_PYTHON ${input:"build/scripts/clang_wrapper.py"} $GCCFILTER $CLANG_ROOT/bin/clang++ ${pre=-I:INCLUDE} $CXXFLAGS $LLVM_OPTS -emit-llvm -c ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p BC"} ${kv;hide:"pc light-green"}
}

LLVM_COMPILE_C(Input, Output, Opts...) {
    $PEERDIR(contrib/libs/clang)
    cmd=$YMAKE_PYTHON ${input:"build/scripts/clang_wrapper.py"} $GCCFILTER $CLANG_ROOT/bin/clang ${pre=-I:INCLUDE} $CFLAGS $LLVM_OPTS -emit-llvm -c ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p BC"} ${kv;hide:"pc light-green"}
}

LLVM_LINK(Output, Inputs...) {
    $PEERDIR(contrib/libs/clang)
    cmd=$CLANG_ROOT/bin/llvm-link ${input:Inputs} -o ${output;noauto:Output} ${kv;hide:"p LD"} ${kv;hide:"pc light-red"}
}

LLVM_OPT(Input, Output, Opts...) {
    $PEERDIR(contrib/libs/clang)
    cmd=$YMAKE_PYTHON ${input:"build/scripts/llvm_opt_wrapper.py"} $CLANG_ROOT/bin/opt ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p OP"} ${kv;hide:"pc yellow"}
}

? ($NO_DEBUGINFO == "yes") DEBUG_INFO_FLAGS=
? ($CLANG && $DEBUGINFO_LINES_ONLY == "yes" && $NO_DEBUGINFO != "yes") DEBUG_INFO_FLAGS=-gline-tables-only

# TODO: configurable tar and touch
PACK_TGZ=${cwd:ARCADIA_BUILD_ROOT} tar -czf ${rootrel:OUTPUT} ${rootrel:INPUT} ${kv;hide:"p AR"} ${kv;hide:"pc light-red"}
#TODO: Use ${input:"build/scripts/touch.py"} instead ${ARCADIA_ROOT}/build/scripts/touch.py
TOUCH(Outputs...)=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${output:Outputs}
TOUCH_UNIT=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${kv;hide:"p UN"} ${kv;hide:"pc light-cyan"} $TARGET
TOUCH_PACKAGE=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${kv;hide:"p PK"} ${kv;hide:"pc light-red"} $TARGET && $YMAKE_PYTHON ${input:"build/scripts/copy_to_dir.py"} --dest-dir $BINDIR --build-root $ARCADIA_BUILD_ROOT $PACKED_PACKAGE_ARGS $SRCS_GLOBAL $PEERS
TOUCH_JAVA_UNIT=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${kv;hide:"java $CURDIR"} $TARGET

NO_CHECK_IMPORTS_FOR_VALUE=None
? ($SANITIZER_TYPE && $SANITIZER_TYPE == "pg") NO_CHECK_IMPORTS_FOR_VALUE=""
NO_CHECK_IMPORTS(Masks...) {
    $SET(NO_CHECK_IMPORTS_FOR_VALUE $Masks)
}

PY_CODENAV(For)=${cwd:BINDIR} $YMAKE_PYTHON ${input:"build/scripts/py_codenav.py"} --tool ${tool:"devtools/codenav/python/pyxref"} --out ${output:For.xref} --binary ${tool:For} ${kv;hide:"p CN"} ${kv;hide:"pc yellow"};
